#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Dec  6 12:48:51 2019

@author: swanliz98
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Dec  5 11:45:50 2019

@author: swanliz98
"""


import pandas as pd

thirdDownConversions = pd.read_csv('national_team-2018-3rdDownConversions.csv')
fourthDownConversions = pd.read_csv('national_team-2018-4thDownConversions.csv')
fieldGoals = pd.read_csv('national_team-2018-FieldGoals.csv')
firstDowns = pd.read_csv('national_team-2018-FirstDowns.csv')
fumblesForced = pd.read_csv('national_team-2018-FumblesForced.csv')
fumblesLost = pd.read_csv('national_team-2018-FumblesLost.csv')
fumblesRecovered = pd.read_csv('national_team-2018-FumblesRecovered.csv')
interceptions = pd.read_csv('national_team-2018-Interceptions.csv')
kickoffReturns = pd.read_csv('national_team-2018-KickoffReturns.csv')
kickoffs = pd.read_csv('national_team-2018-Kickoffs.csv')
kicksPuntsBlocked = pd.read_csv('national_team-2018-KicksPuntsBlocked.csv')
longKickoffReturnPlays = pd.read_csv('national_team-2018-LongKickoffReturnPlays.csv')
longPassingPlays = pd.read_csv('national_team-2018-LongPassingPlays.csv')
longPuntReturnPlays = pd.read_csv('national_team-2018-LongPuntReturnPlays.csv')
longRushingPlays = pd.read_csv('national_team-2018-LongRushingPlays.csv')
longScrimmagePlays = pd.read_csv('national_team-2018-LongScrimmagePlays.csv')
opponent3rdDownConversions = pd.read_csv('national_team-2018-Opponent3rdDownConversions.csv')
opponent4thDownConversions = pd.read_csv('national_team-2018-Opponent4thDownConversions.csv')
opponentFieldGoals = pd.read_csv('national_team-2018-OpponentFieldGoals.csv')
opponentFirstDowns = pd.read_csv('national_team-2018-OpponentFirstDowns.csv')
opponentKickoffReturns = pd.read_csv('national_team-2018-OpponentKickoffReturns.csv')
opponentKickoffs = pd.read_csv('national_team-2018-OpponentKickoffs.csv')
opponentLongKickoffReturnPlays = pd.read_csv('national_team-2018-OpponentLongKickoffReturnPlays.csv')
opponentLongPassingPlays = pd.read_csv('national_team-2018-OpponentLongPassingPlays.csv')
opponentLongPuntReturnPlays = pd.read_csv('national_team-2018-OpponentLongPuntReturnPlays.csv')
opponentLongRushingPlays = pd.read_csv('national_team-2018-OpponentLongRushingPlays.csv')
opponentLongScrimmagePlays = pd.read_csv('national_team-2018-OpponentLongScrimmagePlays.csv')
opponentPATKicking = pd.read_csv('national_team-2018-OpponentPATKicking.csv')
opponentPenalties = pd.read_csv('national_team-2018-OpponentPenalties.csv')
opponentPunting = pd.read_csv('national_team-2018-OpponentPunting.csv')
opponentPuntReturns = pd.read_csv('national_team-2018-OpponentPuntReturns.csv')
opponentRedZoneConversions = pd.read_csv('national_team-2018-OpponentRedZoneConversions.csv')
passesDefended = pd.read_csv('national_team-2018-PassesDefended.csv')
passingDefense = pd.read_csv('national_team-2018-PassingDefense.csv')
passingOffense = pd.read_csv('national_team-2018-PassingOffense.csv')
pATKicking = pd.read_csv('national_team-2018-PATKicking.csv')
penalties = pd.read_csv('national_team-2018-Penalties.csv')
punting = pd.read_csv('national_team-2018-Punting.csv')
puntReturns = pd.read_csv('national_team-2018-PuntReturns.csv')
redZoneConversions = pd.read_csv('national_team-2018-RedZoneConversions.csv')
rushingDefense = pd.read_csv('national_team-2018-RushingDefense.csv')
rushingOffense = pd.read_csv('national_team-2018-RushingOffense.csv')
sacks = pd.read_csv('national_team-2018-Sacks.csv')
sacksAllowed = pd.read_csv('national_team-2018-SacksAllowed.csv')
scoringDefense = pd.read_csv('national_team-2018-ScoringDefense.csv')
scoringOffense = pd.read_csv('national_team-2018-ScoringOffense.csv')
tacklesForLoss = pd.read_csv('national_team-2018-TacklesForLoss.csv')
tacklesForLossAllowed = pd.read_csv('national_team-2018-TacklesForLossAllowed.csv')
timeOfPossession = pd.read_csv('national_team-2018-TimeOfPossession.csv')
totalDefense = pd.read_csv('national_team-2018-TotalDefense.csv')
totalOffense = pd.read_csv('national_team-2018-TotalOffense.csv')
turnoverMargin = pd.read_csv('national_team-2018-TurnoverMargin.csv')


##################################








##################################
pd.merge(fieldGoals,firstDowns, on='Name')

pd.merge(fieldGoals,firstDowns, on='Name', how='outer')




def cleandf(data):
    data_cln = data.drop([data.columns[0], data.columns[1], data.columns[2]], axis='columns')
    return(data_cln)




def cleanandmerge(data1,data2):
    data1_cln = data1.drop([data1.columns[0], data1.columns[1]], axis='columns')
    data2_cln = data2.drop([data2.columns[0], data2.columns[1]], axis='columns')
    d12merge = pd.merge(data1_cln, data2_cln, on='Name')
    d12desc = d12merge.describe()
    return(d12merge,d12desc)


cleanandmerge(fieldGoals,firstDowns)


def cleanmergeall(data1,data2,data3,data4,data5,data6,data7,data8,data9,data10):
    data1_cln = data1.drop([data1.columns[0], data1.columns[1]], axis='columns')
    data2_cln = data2.drop([data2.columns[0], data2.columns[1]], axis='columns')
    d12merge = pd.merge(data1_cln, data2_cln, on='Name')
    d12desc = d12merge.describe()
    return(d12merge,d12desc)



######## IDEA FOR STARTING FUNCTION #######

def startFootball():
    data = input('Enter the game data you want to compare: ')
    model = input("What model do you want to run? [Overall, One Team, Two Team Comparison]: ")
    if model == "Overall":
        sFoverallstats(data)
    elif model == "One Team":
        sFcompstats1(data)
    else:
        sFcompstats2(data)
    
    ###### EDITED THREE FUNCTIONS TO HAVE DATA AS AN INPUT #######
        
        # ANOHTER WAY TO DO IT WOULD BE THAT IT CREATES A NEW FILE?
        
        # OR PERHAPS IT HAS ALL THE DATA AND IS GROUPED BY TEAM? 
            # - THIS MIGHT HAVE TO BE IT SINCE I CAN'T FIGURE OUT HOW TO MAKE THE INPUT A DATA FRAME


def sFcompstats2(data):
    one = input('Enter the first team name: ')
    two = input('Enter the second team name: ')
    data_fil = data.drop([data.columns[0]], axis='columns')
    data_fil2 = data.drop([data.columns[0], data.columns[1], data.columns[2]],  axis='columns')
    d_one = data_fil[data_fil['Name']==one]
    d_two = data_fil[data_fil['Name']==two]
    d_desc = data_fil2.describe()
    return (d_one,d_two,d_desc)


def sFcompstats1(data):
    one = input('Enter a team name: ')
    data_fil = data.drop([data.columns[0]], axis='columns')
    data_fil2 = data.drop([data.columns[0], data.columns[1], data.columns[2]],  axis='columns')
    d_one = data_fil[data_fil['Name']==one]
    d_desc = data_fil2.describe()
    return(d_one,d_desc)


def sFoverallstats(data):
    data_fil2 = data.drop([data.columns[0], data.columns[1], data.columns[2]], axis='columns')
    d_desc = data_fil2.describe()
    return(d_desc)
    
    



################## THESE ARE THE GOOD ONES #######################

def compstats2(data):
    one = input('Enter the first team name: ')
    two = input('Enter the second team name: ')
    data_fil = data.drop([data.columns[0]], axis='columns')
    data_fil2 = data.drop([data.columns[0], data.columns[1], data.columns[2]],  axis='columns')
    d_one = data_fil[data_fil['Name']==one]
    d_two = data_fil[data_fil['Name']==two]
    d_desc = data_fil2.describe()
    return (d_one,d_two,d_desc)


def compstats1(data):
    one = input('Enter a team name: ')
    data_fil = data.drop([data.columns[0]], axis='columns')
    data_fil2 = data.drop([data.columns[0], data.columns[1], data.columns[2]],  axis='columns')
    d_one = data_fil[data_fil['Name']==one]
    d_desc = data_fil2.describe()
    return(d_one,d_desc)


def overallstats(data):
    data_fil2 = data.drop([data.columns[0], data.columns[1], data.columns[2]], axis='columns')
    d_desc = data_fil2.describe()
    return(d_desc)
    
###############################################    
    

overallstats(fieldGoals)

compstats1(fieldGoals)

overallstats(punting)

overallstats(interceptions)
overallstats(kickoffs)

overallstats(timeOfPossession)
overallstats(totalOffense)
